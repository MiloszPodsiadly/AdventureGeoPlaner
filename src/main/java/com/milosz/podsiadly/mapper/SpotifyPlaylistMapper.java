package com.milosz.podsiadly.mapper;

import com.milosz.podsiadly.dto.SpotifyPlaylistDto;
import com.milosz.podsiadly.model.SpotifyPlaylist;

import java.util.List;
import java.util.stream.Collectors;

public class SpotifyPlaylistMapper {

    // Private constructor to prevent instantiation, as it's a utility class
    private SpotifyPlaylistMapper() {
    }

    /**
     * Maps a SpotifyPlaylist entity to a SpotifyPlaylistDto record.
     *
     * @param entity The SpotifyPlaylist entity to map.
     * @return A new SpotifyPlaylistDto record.
     */
    public static SpotifyPlaylistDto mapToDto(SpotifyPlaylist entity) {
        if (entity == null) {
            return null;
        }
        return new SpotifyPlaylistDto(
                entity.getId(),
                entity.getSpotifyId(),
                entity.getName(),
                entity.getDescription(),
                entity.getIsPublic(), // Use getIsPublic() for boolean
                entity.getCollaborative(),
                entity.getOwnerDisplayName(),
                entity.getOwnerSpotifyId(),
                entity.getExternalUrl(),
                entity.getImageUrl()
        );
    }

    /**
     * Maps a list of SpotifyPlaylist entities to a list of SpotifyPlaylistDto records.
     *
     * @param entities The list of SpotifyPlaylist entities to map.
     * @return A new list of SpotifyPlaylistDto records.
     */
    public static List<SpotifyPlaylistDto> mapToDtoList(List<SpotifyPlaylist> entities) {
        if (entities == null) {
            return List.of(); // Return an empty list instead of null
        }
        return entities.stream()
                .map(SpotifyPlaylistMapper::mapToDto)
                .collect(Collectors.toList());
    }

    /**
     * Maps a SpotifyPlaylistDto record back to a SpotifyPlaylist entity.
     * This might be used if you need to convert DTOs received from the client
     * back into entities for persistence, though for simple updates or creates,
     * you might directly use the DTO in service methods and map to entity there.
     * Note: This method typically doesn't set the 'id' if it's for a new entity,
     * as the ID is usually generated by the database.
     *
     * @param dto The SpotifyPlaylistDto record to map.
     * @return A new SpotifyPlaylist entity.
     */
    public static SpotifyPlaylist mapToEntity(SpotifyPlaylistDto dto) {
        if (dto == null) {
            return null;
        }
        return SpotifyPlaylist.builder()
                .id(dto.id()) // Include ID if you expect to update an existing entity
                .spotifyId(dto.spotifyId())
                .name(dto.name())
                .description(dto.description())
                .isPublic(dto.isPublic())
                .collaborative(dto.collaborative())
                .ownerDisplayName(dto.ownerDisplayName())
                .ownerSpotifyId(dto.ownerSpotifyId())
                .externalUrl(dto.externalUrl())
                .imageUrl(dto.imageUrl())
                .build();
    }
}